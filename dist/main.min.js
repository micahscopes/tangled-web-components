(function (skatejs) {
  'use strict';

  const sym = Symbol();

  let graphViewer = {
    props: {
      // By declaring the property an attribute, we can now pass an initial value
      // for the count as part of the HTML.
      count: skatejs.prop.number({ attribute: true })
    },
    attached(elem) {
      // We use a symbol so we don't pollute the element's namespace.
      elem[sym] = setInterval(() => ++elem.count, 1000);
    },
    detached(elem) {
      // If we didn't clean up after ourselves, we'd continue to render
      // unnecessarily.
      clearInterval(elem[sym]);
    },
    render(elem) {
      // By separating the strings (and not using template literals or string
      // concatenation) it ensures the strings are diffed indepenedently. If
      // you select "Count" with your mouse, it will not deselect whenr endered.
      return skatejs.h('div', 'Count ', elem.count);
    }
  };



  var graphViewer$1 = Object.freeze({
    graphViewer: graphViewer
  });

  skatejs.define('graph-viewer', graphViewer$1);
  //
  // define('graph-viewer', {
  //   props: {
  //     name: { attribute: true }
  //   },
  //   render (elem) {
  //     skate.h('div', `Hello, ${elem.name}`);
  //   }
  // });

}(skatejs));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncmFwaC12aWV3ZXIuanMiLCIuLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQge21hdGh9IGZyb20gJ21hdGhqcydcbi8vIGltcG9ydCB7XG4vLyAgIGV2ZW50LFxuLy8gICBzZWxlY3QsXG4vLyAgIHNlbGVjdEFsbFxuLy8gfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG4vLyBpbXBvcnQgeyB6aXAgfSBmcm9tIFwiZDMtYXJyYXlcIlxuLy8gaW1wb3J0IHsgbGluZSB9IGZyb20gXCJkMy1zaGFwZVwiXG4vLyBpbXBvcnQgY21iIGZyb20gXCJqcy1jb21iaW5hdG9yaWNzXCJcbmltcG9ydCB7aCxwcm9wfSBmcm9tIFwic2thdGVqc1wiXG5jb25zdCBzeW0gPSBTeW1ib2woKTtcblxubGV0IGdyYXBoVmlld2VyID0ge1xuICBwcm9wczoge1xuICAgIC8vIEJ5IGRlY2xhcmluZyB0aGUgcHJvcGVydHkgYW4gYXR0cmlidXRlLCB3ZSBjYW4gbm93IHBhc3MgYW4gaW5pdGlhbCB2YWx1ZVxuICAgIC8vIGZvciB0aGUgY291bnQgYXMgcGFydCBvZiB0aGUgSFRNTC5cbiAgICBjb3VudDogcHJvcC5udW1iZXIoeyBhdHRyaWJ1dGU6IHRydWUgfSlcbiAgfSxcbiAgYXR0YWNoZWQoZWxlbSkge1xuICAgIC8vIFdlIHVzZSBhIHN5bWJvbCBzbyB3ZSBkb24ndCBwb2xsdXRlIHRoZSBlbGVtZW50J3MgbmFtZXNwYWNlLlxuICAgIGVsZW1bc3ltXSA9IHNldEludGVydmFsKCgpID0+ICsrZWxlbS5jb3VudCwgMTAwMCk7XG4gIH0sXG4gIGRldGFjaGVkKGVsZW0pIHtcbiAgICAvLyBJZiB3ZSBkaWRuJ3QgY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzLCB3ZSdkIGNvbnRpbnVlIHRvIHJlbmRlclxuICAgIC8vIHVubmVjZXNzYXJpbHkuXG4gICAgY2xlYXJJbnRlcnZhbChlbGVtW3N5bV0pO1xuICB9LFxuICByZW5kZXIoZWxlbSkge1xuICAgIC8vIEJ5IHNlcGFyYXRpbmcgdGhlIHN0cmluZ3MgKGFuZCBub3QgdXNpbmcgdGVtcGxhdGUgbGl0ZXJhbHMgb3Igc3RyaW5nXG4gICAgLy8gY29uY2F0ZW5hdGlvbikgaXQgZW5zdXJlcyB0aGUgc3RyaW5ncyBhcmUgZGlmZmVkIGluZGVwZW5lZGVudGx5LiBJZlxuICAgIC8vIHlvdSBzZWxlY3QgXCJDb3VudFwiIHdpdGggeW91ciBtb3VzZSwgaXQgd2lsbCBub3QgZGVzZWxlY3Qgd2hlbnIgZW5kZXJlZC5cbiAgICByZXR1cm4gaCgnZGl2JywgJ0NvdW50ICcsIGVsZW0uY291bnQpO1xuICB9XG59O1xuXG5leHBvcnQge2dyYXBoVmlld2VyfTtcbiAgICAvLyB0aGlzLm1peGluKEFuaW1hdGUpO1xuICAgIC8vIGNvbnN0IG5hbWUgPSAnbm9kZXMnO1xuICAgIC8vIHZhciBzZWxmID0gdGhpcztcbiAgICAvL1xuICAgIC8vIHZhciBkcmF3RWRnZSA9IGxpbmUoKVxuICAgIC8vICAgICAueCggKGQpID0+IGQub2Zmc2V0TGVmdCApXG4gICAgLy8gICAgIC55KCAoZCkgPT4gZC5vZmZzZXRUb3AgKTtcbiAgICAvL1xuICAgIC8vIHNlbGYudXBkYXRlRWRnZXMgPSBmdW5jdGlvbihkb21zKXtcbiAgICAvLyAgIHZhciBub2RlcyA9IHNlbGVjdChzZWxmLm5vZGVzKS5zZWxlY3RBbGwoJyonKS5ub2RlcygpXG4gICAgLy8gICBjb25zb2xlLmxvZyhub2RlcylcbiAgICAvLyAgIHZhciBwYWlycyA9IGNtYi5jb21iaW5hdGlvbihub2RlcywyKS50b0FycmF5KClcbiAgICAvLyAgIHZhciBlZGdlTGluZXMgPSBzZWxlY3Qoc2VsZi5yb290KS5zZWxlY3QoXCJzdmdcIikuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgIC8vICAgICAgIC5kYXRhKHBhaXJzKVxuICAgIC8vICAgZWRnZUxpbmVzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAvLyAgIGVkZ2VMaW5lcy5lbnRlcigpLmFwcGVuZChcInBhdGhcIik7XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gc2VsZi51cGRhdGVFZGdlU2VnbWVudHMgPSBmdW5jdGlvbigpe1xuICAgIC8vICAgc2VsZWN0KHNlbGYucm9vdCkuc2VsZWN0KFwic3ZnXCIpLnNlbGVjdEFsbChcInBhdGhcIilcbiAgICAvLyAgICAgICAuYXR0cihcImRcIixkcmF3RWRnZSlcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyB0aGlzLm9uKCdtb3VudCcsKCk9PntcbiAgICAvLyAgIHNlbGYudXBkYXRlRWRnZXMoKVxuICAgIC8vICAgdGhpcy5vbignYW5pbWF0ZScsc2VsZi51cGRhdGVFZGdlU2VnbWVudHMpXG4gICAgLy8gfSk7XG4gICAgLy9cbiIsImltcG9ydCAqIGFzIGdyYXBoVmlld2VyIGZyb20gJy4vZ3JhcGgtdmlld2VyLmpzJ1xuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSBcInNrYXRlanNcIlxuXG5kZWZpbmUoJ2dyYXBoLXZpZXdlcicsIGdyYXBoVmlld2VyKTtcbi8vXG4vLyBkZWZpbmUoJ2dyYXBoLXZpZXdlcicsIHtcbi8vICAgcHJvcHM6IHtcbi8vICAgICBuYW1lOiB7IGF0dHJpYnV0ZTogdHJ1ZSB9XG4vLyAgIH0sXG4vLyAgIHJlbmRlciAoZWxlbSkge1xuLy8gICAgIHNrYXRlLmgoJ2RpdicsIGBIZWxsbywgJHtlbGVtLm5hbWV9YCk7XG4vLyAgIH1cbi8vIH0pO1xuIl0sIm5hbWVzIjpbImgiLCJwcm9wIiwiZ3JhcGhWaWV3ZXIiLCJkZWZpbmUiXSwibWFwcGluZ3MiOiI7OztFQVVBLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDOztBQUVyQixFQUFBLElBQUksV0FBVyxHQUFHO0FBQ2xCLEVBQUEsRUFBRSxLQUFLLEVBQUU7QUFDVCxFQUFBO0FBQ0EsRUFBQTtBQUNBLEVBQUEsSUFBSSxLQUFLLEVBQUVDLFlBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDM0MsRUFBQSxHQUFHO0FBQ0gsRUFBQSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDakIsRUFBQTtBQUNBLEVBQUEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RELEVBQUEsR0FBRztBQUNILEVBQUEsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFO0FBQ2pCLEVBQUE7QUFDQSxFQUFBO0FBQ0EsRUFBQSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3QixFQUFBLEdBQUc7QUFDSCxFQUFBLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtBQUNmLEVBQUE7QUFDQSxFQUFBO0FBQ0EsRUFBQTtBQUNBLEVBQUEsSUFBSSxPQUFPRCxTQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsRUFBQSxHQUFHO0FBQ0gsRUFBQSxDQUFDLENBQUM7O0FBRUY7O0FDaENBRyxnQkFBTSxDQUFDLGNBQWMsRUFBRUQsYUFBVyxDQUFDLENBQUM7QUFDcEMsRUFBQTtBQUNBLEVBQUE7QUFDQSxFQUFBO0FBQ0EsRUFBQTtBQUNBLEVBQUE7QUFDQSxFQUFBO0FBQ0EsRUFBQTtBQUNBLEVBQUE7QUFDQSxFQUFBLE1BQU0sOzsifQ==